# -*- coding: utf-8 -*-
"""visualize_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XjZQtlBzz2pjUEKkes_ZKrApMDX8ZP2G
"""

import matplotlib.pyplot as plt
import numpy as np
import torch
import torchvision

# functions to show an image
def imshow(img,c ):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    fig = plt.figure(figsize=(7,7))
    plt.imshow(np.transpose(npimg, (1, 2, 0)),interpolation='none')
    plt.title(c)

def show_train_data(dataset, classes):
	# get some random training images
  dataiter = iter(dataset)
  images, labels = dataiter.next()
  for i in range(10):
    index = [j for j in range(len(labels)) if labels[j] == i]
    imshow(torchvision.utils.make_grid(images[index[0:5]],nrow=5,padding=2,scale_each=True),classes[i])

def plot_one_cycle_LR(iterations, step_size, lr_min, lr_max):
  cycle = np.floor(1+(iterations/(2*step_size)))
  x = np.abs((iterations/step_size)-(2*cycle)+1)
  lr = lr_min + ((lr_max-lr_min)*(1-x))
  
  # x_axis = np.linspace(0,iterations,2*step_size)
  # y_axis = np.append(np.linspace(lr_min, lr_max,step_size),np.linspace(lr_max,lr_min,step_size))  
  # plt.plot(x_axis,y_axis)

  x_axis = np.append(np.linspace(0,iterations,2*step_size),np.linspace(iterations,2*iterations,2*step_size))
  y_axis = np.append(np.append(np.linspace(lr_min, lr_max,step_size),np.linspace(lr_max,lr_min,step_size)),np.append(np.linspace(lr_min, lr_max,step_size),np.linspace(lr_max,lr_min,step_size)))  
  plt.plot(x_axis,y_axis)